Deployment Report
This file was generated during the github actions workflow run.

## Terraform Plan Output
[command]/home/runner/work/_temp/0722f87b-6c1a-4cfc-8223-e9dcbe6a4fa4/terraform-bin plan -lock=false
[0m[1mdata.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mdata.archive_file.lambda_zip: Read complete after 0s [id=8749e4211ca99cade9b076b813b5cf495bc60174][0m
[0m[1mdata.aws_region.current: Reading...[0m[0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=945839052546][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_iam_policy.lambda_execution_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_execution_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "IAM policy for Lambda to access S3 and CloudWatch Logs"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = (known after apply)
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = (known after apply)
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # aws_iam_role.lambda_execution_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda_execution_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = (known after apply)
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags                  = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Lambda Execution Role for Image Processor"
        }
      [32m+[0m[0m tags_all              = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Lambda Execution Role for Image Processor"
        }
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # aws_iam_role_policy_attachment.lambda_execution_policy_attachment[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda_execution_policy_attachment" {
      [32m+[0m[0m id         = (known after apply)
      [32m+[0m[0m policy_arn = (known after apply)
      [32m+[0m[0m role       = (known after apply)
    }

[1m  # aws_lambda_function.image_processor_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "image_processor_lambda" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "./lambda_image_processor/lambda.zip"
      [32m+[0m[0m function_name                  = (known after apply)
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "7uogEv/XjfY6pqRqOBRrdTMx8Ov7aLVWG9SITKfUvoQ="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Image Processor Lambda"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Image Processor Lambda"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = (known after apply)
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config {
          [32m+[0m[0m mode = "Active"
        }
    }

[1m  # aws_lambda_permission.allow_s3[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_s3" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = (known after apply)
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "s3.amazonaws.com"
      [32m+[0m[0m source_account      = "945839052546"
      [32m+[0m[0m source_arn          = (known after apply)
      [32m+[0m[0m statement_id        = "AllowS3Invocation"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_s3_bucket.processed_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "processed_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Processed Image Destination Bucket"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Processed Image Destination Bucket"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # aws_s3_bucket.source_bucket[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "source_bucket" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = (known after apply)
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Image Upload Source Bucket"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Image Upload Source Bucket"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # aws_s3_bucket_acl.processed_acl[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_acl" "processed_acl" {
      [32m+[0m[0m acl    = "private"
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m access_control_policy (known after apply)
    }

[1m  # aws_s3_bucket_acl.source_acl[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_acl" "source_acl" {
      [32m+[0m[0m acl    = "private"
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m access_control_policy (known after apply)
    }

[1m  # aws_s3_bucket_notification.image_upload_trigger[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_notification" "image_upload_trigger" {
      [32m+[0m[0m bucket      = (known after apply)
      [32m+[0m[0m eventbridge = false
      [32m+[0m[0m id          = (known after apply)

      [32m+[0m[0m lambda_function {
          [32m+[0m[0m events              = [
              [32m+[0m[0m "s3:ObjectCreated:*",
            ]
          [32m+[0m[0m filter_prefix       = "uploads/"
          [32m+[0m[0m id                  = (known after apply)
          [32m+[0m[0m lambda_function_arn = (known after apply)
        }
    }

[1m  # aws_s3_bucket_policy.source_bucket_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "source_bucket_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # aws_s3_bucket_server_side_encryption_configuration.processed_sse[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "processed_sse" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm     = "AES256"
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        }
    }

[1m  # aws_s3_bucket_server_side_encryption_configuration.source_sse[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "source_sse" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)

      [32m+[0m[0m rule {
          [32m+[0m[0m apply_server_side_encryption_by_default {
              [32m+[0m[0m sse_algorithm     = "AES256"
                [90m# (1 unchanged attribute hidden)[0m[0m
            }
        }
    }

[1m  # random_id.suffix[0m will be created
[0m  [32m+[0m[0m resource "random_id" "suffix" {
      [32m+[0m[0m b64_std     = (known after apply)
      [32m+[0m[0m b64_url     = (known after apply)
      [32m+[0m[0m byte_length = 8
      [32m+[0m[0m dec         = (known after apply)
      [32m+[0m[0m hex         = (known after apply)
      [32m+[0m[0m id          = (known after apply)
    }

[1mPlan:[0m 14 to add, 0 to change, 0 to destroy.
[0m[90m
─────────────────────────────────────────────────────────────────────────────[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
::debug::Terraform exited with code 0.
::debug::stdout: [0m[1mdata.archive_file.lambda_zip: Reading...[0m[0m%0A[0m[1mdata.archive_file.lambda_zip: Read complete after 0s [id=8749e4211ca99cade9b076b813b5cf495bc60174][0m%0A[0m[1mdata.aws_region.current: Reading...[0m[0m%0A[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m%0A[0m[1mdata.aws_region.current: Read complete after 0s [id=us-east-1][0m%0A[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=945839052546][0m%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A  [32m+[0m create[0m%0A%0ATerraform will perform the following actions:%0A%0A[1m  # aws_iam_policy.lambda_execution_policy[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_execution_policy" {%0A      [32m+[0m[0m arn              = (known after apply)%0A      [32m+[0m[0m attachment_count = (known after apply)%0A      [32m+[0m[0m description      = "IAM policy for Lambda to access S3 and CloudWatch Logs"%0A      [32m+[0m[0m id               = (known after apply)%0A      [32m+[0m[0m name             = (known after apply)%0A      [32m+[0m[0m name_prefix      = (known after apply)%0A      [32m+[0m[0m path             = "/"%0A      [32m+[0m[0m policy           = (known after apply)%0A      [32m+[0m[0m policy_id        = (known after apply)%0A      [32m+[0m[0m tags_all         = (known after apply)%0A    }%0A%0A[1m  # aws_iam_role.lambda_execution_role[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_role" "lambda_execution_role" {%0A      [32m+[0m[0m arn                   = (known after apply)%0A      [32m+[0m[0m assume_role_policy    = jsonencode(%0A            {%0A              [32m+[0m[0m Statement = [%0A                  [32m+[0m[0m {%0A                      [32m+[0m[0m Action    = "sts:AssumeRole"%0A                      [32m+[0m[0m Effect    = "Allow"%0A                      [32m+[0m[0m Principal = {%0A                          [32m+[0m[0m Service = "lambda.amazonaws.com"%0A                        }%0A                    },%0A                ]%0A              [32m+[0m[0m Version   = "2012-10-17"%0A            }%0A        )%0A      [32m+[0m[0m create_date           = (known after apply)%0A      [32m+[0m[0m force_detach_policies = false%0A      [32m+[0m[0m id                    = (known after apply)%0A      [32m+[0m[0m managed_policy_arns   = (known after apply)%0A      [32m+[0m[0m max_session_duration  = 3600%0A      [32m+[0m[0m name                  = (known after apply)%0A      [32m+[0m[0m name_prefix           = (known after apply)%0A      [32m+[0m[0m path                  = "/"%0A      [32m+[0m[0m tags                  = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Lambda Execution Role for Image Processor"%0A        }%0A      [32m+[0m[0m tags_all              = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Lambda Execution Role for Image Processor"%0A        }%0A      [32m+[0m[0m unique_id             = (known after apply)%0A%0A      [32m+[0m[0m inline_policy (known after apply)%0A    }%0A%0A[1m  # aws_iam_role_policy_attachment.lambda_execution_policy_attachment[0m will be created%0A[0m  [32m+[0m[0m resource "aws_iam_role_policy_attachment" "lambda_execution_policy_attachment" {%0A      [32m+[0m[0m id         = (known after apply)%0A      [32m+[0m[0m policy_arn = (known after apply)%0A      [32m+[0m[0m role       = (known after apply)%0A    }%0A%0A[1m  # aws_lambda_function.image_processor_lambda[0m will be created%0A[0m  [32m+[0m[0m resource "aws_lambda_function" "image_processor_lambda" {%0A      [32m+[0m[0m architectures                  = (known after apply)%0A      [32m+[0m[0m arn                            = (known after apply)%0A      [32m+[0m[0m code_sha256                    = (known after apply)%0A      [32m+[0m[0m filename                       = "./lambda_image_processor/lambda.zip"%0A      [32m+[0m[0m function_name                  = (known after apply)%0A      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"%0A      [32m+[0m[0m id                             = (known after apply)%0A      [32m+[0m[0m invoke_arn                     = (known after apply)%0A      [32m+[0m[0m last_modified                  = (known after apply)%0A      [32m+[0m[0m memory_size                    = 256%0A      [32m+[0m[0m package_type                   = "Zip"%0A      [32m+[0m[0m publish                        = false%0A      [32m+[0m[0m qualified_arn                  = (known after apply)%0A      [32m+[0m[0m qualified_invoke_arn           = (known after apply)%0A      [32m+[0m[0m reserved_concurrent_executions = -1%0A      [32m+[0m[0m role                           = (known after apply)%0A      [32m+[0m[0m runtime                        = "python3.9"%0A      [32m+[0m[0m signing_job_arn                = (known after apply)%0A      [32m+[0m[0m signing_profile_version_arn    = (known after apply)%0A      [32m+[0m[0m skip_destroy                   = false%0A      [32m+[0m[0m source_code_hash               = "7uogEv/XjfY6pqRqOBRrdTMx8Ov7aLVWG9SITKfUvoQ="%0A      [32m+[0m[0m source_code_size               = (known after apply)%0A      [32m+[0m[0m tags                           = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Image Processor Lambda"%0A        }%0A      [32m+[0m[0m tags_all                       = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Image Processor Lambda"%0A        }%0A      [32m+[0m[0m timeout                        = 30%0A      [32m+[0m[0m version                        = (known after apply)%0A%0A      [32m+[0m[0m environment {%0A          [32m+[0m[0m variables = (known after apply)%0A        }%0A%0A      [32m+[0m[0m ephemeral_storage (known after apply)%0A%0A      [32m+[0m[0m logging_config (known after apply)%0A%0A      [32m+[0m[0m tracing_config {%0A          [32m+[0m[0m mode = "Active"%0A        }%0A    }%0A%0A[1m  # aws_lambda_permission.allow_s3[0m will be created%0A[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_s3" {%0A      [32m+[0m[0m action              = "lambda:InvokeFunction"%0A      [32m+[0m[0m function_name       = (known after apply)%0A      [32m+[0m[0m id                  = (known after apply)%0A      [32m+[0m[0m principal           = "s3.amazonaws.com"%0A      [32m+[0m[0m source_account      = "945839052546"%0A      [32m+[0m[0m source_arn          = (known after apply)%0A      [32m+[0m[0m statement_id        = "AllowS3Invocation"%0A      [32m+[0m[0m statement_id_prefix = (known after apply)%0A    }%0A%0A[1m  # aws_s3_bucket.processed_bucket[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket" "processed_bucket" {%0A      [32m+[0m[0m acceleration_status         = (known after apply)%0A      [32m+[0m[0m acl                         = (known after apply)%0A      [32m+[0m[0m arn                         = (known after apply)%0A      [32m+[0m[0m bucket                      = (known after apply)%0A      [32m+[0m[0m bucket_domain_name          = (known after apply)%0A      [32m+[0m[0m bucket_prefix               = (known after apply)%0A      [32m+[0m[0m bucket_regional_domain_name = (known after apply)%0A      [32m+[0m[0m force_destroy               = false%0A      [32m+[0m[0m hosted_zone_id              = (known after apply)%0A      [32m+[0m[0m id                          = (known after apply)%0A      [32m+[0m[0m object_lock_enabled         = (known after apply)%0A      [32m+[0m[0m policy                      = (known after apply)%0A      [32m+[0m[0m region                      = (known after apply)%0A      [32m+[0m[0m request_payer               = (known after apply)%0A      [32m+[0m[0m tags                        = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Processed Image Destination Bucket"%0A        }%0A      [32m+[0m[0m tags_all                    = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Processed Image Destination Bucket"%0A        }%0A      [32m+[0m[0m website_domain              = (known after apply)%0A      [32m+[0m[0m website_endpoint            = (known after apply)%0A%0A      [32m+[0m[0m cors_rule (known after apply)%0A%0A      [32m+[0m[0m grant (known after apply)%0A%0A      [32m+[0m[0m lifecycle_rule (known after apply)%0A%0A      [32m+[0m[0m logging (known after apply)%0A%0A      [32m+[0m[0m object_lock_configuration (known after apply)%0A%0A      [32m+[0m[0m replication_configuration (known after apply)%0A%0A      [32m+[0m[0m server_side_encryption_configuration (known after apply)%0A%0A      [32m+[0m[0m versioning (known after apply)%0A%0A      [32m+[0m[0m website (known after apply)%0A    }%0A%0A[1m  # aws_s3_bucket.source_bucket[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket" "source_bucket" {%0A      [32m+[0m[0m acceleration_status         = (known after apply)%0A      [32m+[0m[0m acl                         = (known after apply)%0A      [32m+[0m[0m arn                         = (known after apply)%0A      [32m+[0m[0m bucket                      = (known after apply)%0A      [32m+[0m[0m bucket_domain_name          = (known after apply)%0A      [32m+[0m[0m bucket_prefix               = (known after apply)%0A      [32m+[0m[0m bucket_regional_domain_name = (known after apply)%0A      [32m+[0m[0m force_destroy               = false%0A      [32m+[0m[0m hosted_zone_id              = (known after apply)%0A      [32m+[0m[0m id                          = (known after apply)%0A      [32m+[0m[0m object_lock_enabled         = (known after apply)%0A      [32m+[0m[0m policy                      = (known after apply)%0A      [32m+[0m[0m region                      = (known after apply)%0A      [32m+[0m[0m request_payer               = (known after apply)%0A      [32m+[0m[0m tags                        = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Image Upload Source Bucket"%0A        }%0A      [32m+[0m[0m tags_all                    = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Image Upload Source Bucket"%0A        }%0A      [32m+[0m[0m website_domain              = (known after apply)%0A      [32m+[0m[0m website_endpoint            = (known after apply)%0A%0A      [32m+[0m[0m cors_rule (known after apply)%0A%0A      [32m+[0m[0m grant (known after apply)%0A%0A      [32m+[0m[0m lifecycle_rule (known after apply)%0A%0A      [32m+[0m[0m logging (known after apply)%0A%0A      [32m+[0m[0m object_lock_configuration (known after apply)%0A%0A      [32m+[0m[0m replication_configuration (known after apply)%0A%0A      [32m+[0m[0m server_side_encryption_configuration (known after apply)%0A%0A      [32m+[0m[0m versioning (known after apply)%0A%0A      [32m+[0m[0m website (known after apply)%0A    }%0A%0A[1m  # aws_s3_bucket_acl.processed_acl[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket_acl" "processed_acl" {%0A      [32m+[0m[0m acl    = "private"%0A      [32m+[0m[0m bucket = (known after apply)%0A      [32m+[0m[0m id     = (known after apply)%0A%0A      [32m+[0m[0m access_control_policy (known after apply)%0A    }%0A%0A[1m  # aws_s3_bucket_acl.source_acl[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket_acl" "source_acl" {%0A      [32m+[0m[0m acl    = "private"%0A      [32m+[0m[0m bucket = (known after apply)%0A      [32m+[0m[0m id     = (known after apply)%0A%0A      [32m+[0m[0m access_control_policy (known after apply)%0A    }%0A%0A[1m  # aws_s3_bucket_notification.image_upload_trigger[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket_notification" "image_upload_trigger" {%0A      [32m+[0m[0m bucket      = (known after apply)%0A      [32m+[0m[0m eventbridge = false%0A      [32m+[0m[0m id          = (known after apply)%0A%0A      [32m+[0m[0m lambda_function {%0A          [32m+[0m[0m events              = [%0A              [32m+[0m[0m "s3:ObjectCreated:*",%0A            ]%0A          [32m+[0m[0m filter_prefix       = "uploads/"%0A          [32m+[0m[0m id                  = (known after apply)%0A          [32m+[0m[0m lambda_function_arn = (known after apply)%0A        }%0A    }%0A%0A[1m  # aws_s3_bucket_policy.source_bucket_policy[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "source_bucket_policy" {%0A      [32m+[0m[0m bucket = (known after apply)%0A      [32m+[0m[0m id     = (known after apply)%0A      [32m+[0m[0m policy = (known after apply)%0A    }%0A%0A[1m  # aws_s3_bucket_server_side_encryption_configuration.processed_sse[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "processed_sse" {%0A      [32m+[0m[0m bucket = (known after apply)%0A      [32m+[0m[0m id     = (known after apply)%0A%0A      [32m+[0m[0m rule {%0A          [32m+[0m[0m apply_server_side_encryption_by_default {%0A              [32m+[0m[0m sse_algorithm     = "AES256"%0A                [90m# (1 unchanged attribute hidden)[0m[0m%0A            }%0A        }%0A    }%0A%0A[1m  # aws_s3_bucket_server_side_encryption_configuration.source_sse[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket_server_side_encryption_configuration" "source_sse" {%0A      [32m+[0m[0m bucket = (known after apply)%0A      [32m+[0m[0m id     = (known after apply)%0A%0A      [32m+[0m[0m rule {%0A          [32m+[0m[0m apply_server_side_encryption_by_default {%0A              [32m+[0m[0m sse_algorithm     = "AES256"%0A                [90m# (1 unchanged attribute hidden)[0m[0m%0A            }%0A        }%0A    }%0A%0A[1m  # random_id.suffix[0m will be created%0A[0m  [32m+[0m[0m resource "random_id" "suffix" {%0A      [32m+[0m[0m b64_std     = (known after apply)%0A      [32m+[0m[0m b64_url     = (known after apply)%0A      [32m+[0m[0m byte_length = 8%0A      [32m+[0m[0m dec         = (known after apply)%0A      [32m+[0m[0m hex         = (known after apply)%0A      [32m+[0m[0m id          = (known after apply)%0A    }%0A%0A[1mPlan:[0m 14 to add, 0 to change, 0 to destroy.%0A[0m[90m%0A─────────────────────────────────────────────────────────────────────────────[0m%0A%0ANote: You didn't use the -out option to save this plan, so Terraform can't%0Aguarantee to take exactly these actions if you run "terraform apply" now.%0A
::debug::stderr: 
::debug::exitcode: 0
