Deployment Report
This file was generated during the github actions workflow run.

## Terraform Plan Output
[command]/home/runner/work/_temp/ec8b3e06-fe71-4da3-b867-43e575f26168/terraform-bin plan -lock=false
[0m[1mrandom_id.suffix: Refreshing state... [id=zFE5akGEt-o][0m
[0m[1mdata.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mdata.archive_file.lambda_zip: Read complete after 0s [id=8749e4211ca99cade9b076b813b5cf495bc60174][0m
[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m
[0m[1mdata.aws_region.current: Reading...[0m[0m
[0m[1maws_iam_role.lambda_execution_role: Refreshing state... [id=lambda-image-processor-role-cc51396a4184b7ea][0m
[0m[1mdata.aws_region.current: Read complete after 0s [id=us-east-1][0m
[0m[1maws_s3_bucket.source_bucket: Refreshing state... [id=image-upload-source-bucket-cc51396a4184b7ea][0m
[0m[1maws_s3_bucket.processed_bucket: Refreshing state... [id=processed-image-destination-bucket-cc51396a4184b7ea][0m
[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=945839052546][0m
[0m[1maws_s3_bucket_policy.source_bucket_policy: Refreshing state... [id=image-upload-source-bucket-cc51396a4184b7ea][0m
[0m[1maws_s3_bucket_server_side_encryption_configuration.source_sse: Refreshing state... [id=image-upload-source-bucket-cc51396a4184b7ea][0m
[0m[1maws_iam_policy.lambda_execution_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/lambda-image-processor-policy-cc51396a4184b7ea][0m
[0m[1maws_s3_bucket_server_side_encryption_configuration.processed_sse: Refreshing state... [id=processed-image-destination-bucket-cc51396a4184b7ea][0m
[0m[1maws_iam_role_policy_attachment.lambda_execution_policy_attachment: Refreshing state... [id=lambda-image-processor-role-cc51396a4184b7ea-20250423090053537500000001][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_lambda_function.image_processor_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "image_processor_lambda" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "./lambda_image_processor/lambda.zip"
      [32m+[0m[0m function_name                  = "image-processor-lambda-cc51396a4184b7ea"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 256
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = "arn:aws:iam::945839052546:role/lambda-image-processor-role-cc51396a4184b7ea"
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = "7uogEv/XjfY6pqRqOBRrdTMx8Ov7aLVWG9SITKfUvoQ="
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags                           = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Image Processor Lambda"
        }
      [32m+[0m[0m tags_all                       = {
          [32m+[0m[0m "Environment" = "dev"
          [32m+[0m[0m "Name"        = "Image Processor Lambda"
        }
      [32m+[0m[0m timeout                        = 30
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "PROCESSED_BUCKET_NAME" = "processed-image-destination-bucket-cc51396a4184b7ea"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config {
          [32m+[0m[0m mode = "Active"
        }
    }

[1m  # aws_lambda_permission.allow_s3[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_s3" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "image-processor-lambda-cc51396a4184b7ea"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "s3.amazonaws.com"
      [32m+[0m[0m source_account      = "945839052546"
      [32m+[0m[0m source_arn          = "arn:aws:s3:::image-upload-source-bucket-cc51396a4184b7ea"
      [32m+[0m[0m statement_id        = "AllowS3Invocation"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # aws_s3_bucket_notification.image_upload_trigger[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_notification" "image_upload_trigger" {
      [32m+[0m[0m bucket      = "image-upload-source-bucket-cc51396a4184b7ea"
      [32m+[0m[0m eventbridge = false
      [32m+[0m[0m id          = (known after apply)

      [32m+[0m[0m lambda_function {
          [32m+[0m[0m events              = [
              [32m+[0m[0m "s3:ObjectCreated:*",
            ]
          [32m+[0m[0m filter_prefix       = "uploads/"
          [32m+[0m[0m id                  = (known after apply)
          [32m+[0m[0m lambda_function_arn = (known after apply)
        }
    }

[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.
[0m[90m
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m

Note: You didn't use the -out option to save this plan, so Terraform can't
guarantee to take exactly these actions if you run "terraform apply" now.
::debug::Terraform exited with code 0.
::debug::stdout: [0m[1mrandom_id.suffix: Refreshing state... [id=zFE5akGEt-o][0m%0A[0m[1mdata.archive_file.lambda_zip: Reading...[0m[0m%0A[0m[1mdata.archive_file.lambda_zip: Read complete after 0s [id=8749e4211ca99cade9b076b813b5cf495bc60174][0m%0A[0m[1mdata.aws_caller_identity.current: Reading...[0m[0m%0A[0m[1mdata.aws_region.current: Reading...[0m[0m%0A[0m[1maws_iam_role.lambda_execution_role: Refreshing state... [id=lambda-image-processor-role-cc51396a4184b7ea][0m%0A[0m[1mdata.aws_region.current: Read complete after 0s [id=us-east-1][0m%0A[0m[1maws_s3_bucket.source_bucket: Refreshing state... [id=image-upload-source-bucket-cc51396a4184b7ea][0m%0A[0m[1maws_s3_bucket.processed_bucket: Refreshing state... [id=processed-image-destination-bucket-cc51396a4184b7ea][0m%0A[0m[1mdata.aws_caller_identity.current: Read complete after 0s [id=945839052546][0m%0A[0m[1maws_s3_bucket_policy.source_bucket_policy: Refreshing state... [id=image-upload-source-bucket-cc51396a4184b7ea][0m%0A[0m[1maws_s3_bucket_server_side_encryption_configuration.source_sse: Refreshing state... [id=image-upload-source-bucket-cc51396a4184b7ea][0m%0A[0m[1maws_iam_policy.lambda_execution_policy: Refreshing state... [id=arn:aws:iam::945839052546:policy/lambda-image-processor-policy-cc51396a4184b7ea][0m%0A[0m[1maws_s3_bucket_server_side_encryption_configuration.processed_sse: Refreshing state... [id=processed-image-destination-bucket-cc51396a4184b7ea][0m%0A[0m[1maws_iam_role_policy_attachment.lambda_execution_policy_attachment: Refreshing state... [id=lambda-image-processor-role-cc51396a4184b7ea-20250423090053537500000001][0m%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A  [32m+[0m create[0m%0A%0ATerraform will perform the following actions:%0A%0A[1m  # aws_lambda_function.image_processor_lambda[0m will be created%0A[0m  [32m+[0m[0m resource "aws_lambda_function" "image_processor_lambda" {%0A      [32m+[0m[0m architectures                  = (known after apply)%0A      [32m+[0m[0m arn                            = (known after apply)%0A      [32m+[0m[0m code_sha256                    = (known after apply)%0A      [32m+[0m[0m filename                       = "./lambda_image_processor/lambda.zip"%0A      [32m+[0m[0m function_name                  = "image-processor-lambda-cc51396a4184b7ea"%0A      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"%0A      [32m+[0m[0m id                             = (known after apply)%0A      [32m+[0m[0m invoke_arn                     = (known after apply)%0A      [32m+[0m[0m last_modified                  = (known after apply)%0A      [32m+[0m[0m memory_size                    = 256%0A      [32m+[0m[0m package_type                   = "Zip"%0A      [32m+[0m[0m publish                        = false%0A      [32m+[0m[0m qualified_arn                  = (known after apply)%0A      [32m+[0m[0m qualified_invoke_arn           = (known after apply)%0A      [32m+[0m[0m reserved_concurrent_executions = -1%0A      [32m+[0m[0m role                           = "arn:aws:iam::945839052546:role/lambda-image-processor-role-cc51396a4184b7ea"%0A      [32m+[0m[0m runtime                        = "python3.9"%0A      [32m+[0m[0m signing_job_arn                = (known after apply)%0A      [32m+[0m[0m signing_profile_version_arn    = (known after apply)%0A      [32m+[0m[0m skip_destroy                   = false%0A      [32m+[0m[0m source_code_hash               = "7uogEv/XjfY6pqRqOBRrdTMx8Ov7aLVWG9SITKfUvoQ="%0A      [32m+[0m[0m source_code_size               = (known after apply)%0A      [32m+[0m[0m tags                           = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Image Processor Lambda"%0A        }%0A      [32m+[0m[0m tags_all                       = {%0A          [32m+[0m[0m "Environment" = "dev"%0A          [32m+[0m[0m "Name"        = "Image Processor Lambda"%0A        }%0A      [32m+[0m[0m timeout                        = 30%0A      [32m+[0m[0m version                        = (known after apply)%0A%0A      [32m+[0m[0m environment {%0A          [32m+[0m[0m variables = {%0A              [32m+[0m[0m "PROCESSED_BUCKET_NAME" = "processed-image-destination-bucket-cc51396a4184b7ea"%0A            }%0A        }%0A%0A      [32m+[0m[0m ephemeral_storage (known after apply)%0A%0A      [32m+[0m[0m logging_config (known after apply)%0A%0A      [32m+[0m[0m tracing_config {%0A          [32m+[0m[0m mode = "Active"%0A        }%0A    }%0A%0A[1m  # aws_lambda_permission.allow_s3[0m will be created%0A[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_s3" {%0A      [32m+[0m[0m action              = "lambda:InvokeFunction"%0A      [32m+[0m[0m function_name       = "image-processor-lambda-cc51396a4184b7ea"%0A      [32m+[0m[0m id                  = (known after apply)%0A      [32m+[0m[0m principal           = "s3.amazonaws.com"%0A      [32m+[0m[0m source_account      = "945839052546"%0A      [32m+[0m[0m source_arn          = "arn:aws:s3:::image-upload-source-bucket-cc51396a4184b7ea"%0A      [32m+[0m[0m statement_id        = "AllowS3Invocation"%0A      [32m+[0m[0m statement_id_prefix = (known after apply)%0A    }%0A%0A[1m  # aws_s3_bucket_notification.image_upload_trigger[0m will be created%0A[0m  [32m+[0m[0m resource "aws_s3_bucket_notification" "image_upload_trigger" {%0A      [32m+[0m[0m bucket      = "image-upload-source-bucket-cc51396a4184b7ea"%0A      [32m+[0m[0m eventbridge = false%0A      [32m+[0m[0m id          = (known after apply)%0A%0A      [32m+[0m[0m lambda_function {%0A          [32m+[0m[0m events              = [%0A              [32m+[0m[0m "s3:ObjectCreated:*",%0A            ]%0A          [32m+[0m[0m filter_prefix       = "uploads/"%0A          [32m+[0m[0m id                  = (known after apply)%0A          [32m+[0m[0m lambda_function_arn = (known after apply)%0A        }%0A    }%0A%0A[1mPlan:[0m 3 to add, 0 to change, 0 to destroy.%0A[0m[90m%0Aâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€[0m%0A%0ANote: You didn't use the -out option to save this plan, so Terraform can't%0Aguarantee to take exactly these actions if you run "terraform apply" now.%0A
::debug::stderr: 
::debug::exitcode: 0
